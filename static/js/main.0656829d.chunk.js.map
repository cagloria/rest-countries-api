{"version":3,"sources":["components/Themes.js","components/ThemeSwitch.js","components/NameInput.js","components/RegionSelect.js","components/Country.js","components/Borders.js","components/CountryDetails.js","components/App.js","index.js"],"names":["lightTheme","bodyBG","elementBG","text","inputText","buttonHover","linkHover","darkTheme","GlobalStyles","createGlobalStyle","theme","ThemeSwitch","onThemeSwitch","useState","darkMode","setDarkMode","className","onClick","name","aria-hidden","NameInput","defaultVal","onNameInput","input","setInput","type","aria-label","placeholder","value","onChange","event","target","RegionSelect","onRegionSelect","setValue","id","Country","link","obj","flag","population","region","capital","stringExists","string","length","src","alt","to","replace","toLocaleString","Borders","borders","names","setNames","error","setError","useEffect","codes","i","url","$","get","data","items","forEach","country","push","fail","xhr","status","responseText","bordersEl","map","key","CountryDetails","nativeName","subregion","topLevelDomain","currencies","languages","formatArray","arr","App","countries","setCountries","nameSearch","setNameSearch","regionSearch","setRegionSearch","message","setMessage","done","undefined","filteredCountries","filter","toLowerCase","includes","nameMatch","regionMatch","homeCountryContent","onDarkMode","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0656829d.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const lightTheme = {\r\n    bodyBG: \"hsl(0, 0%, 98%)\",\r\n    elementBG: \"hsl(0, 0%, 100%)\",\r\n    text: \"hsl(200, 15%, 8%)\",\r\n    inputText: \"hsl(0, 0%, 52%)\",\r\n    buttonHover: \"hsl(0, 0%, 90%)\",\r\n    linkHover: \"hsl(200, 25%, 44%)\",\r\n};\r\n\r\nexport const darkTheme = {\r\n    bodyBG: \"hsl(207, 26%, 17%)\",\r\n    elementBG: \"hsl(209, 23%, 22%)\",\r\n    text: \"hsl(0, 0%, 100%)\",\r\n    inputText: \"hsl(0, 0%, 100%)\",\r\n    buttonHover: \"hsl(209, 23%, 42%)\",\r\n    linkHover: \"hsl(200, 50%, 70%)\",\r\n};\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n    body {\r\n        color: ${({ theme }) => theme.text};\r\n        background-color: ${({ theme }) => theme.bodyBG};\r\n    }\r\n\r\n    a {\r\n        color: ${({ theme }) => theme.text};\r\n        &:hover:not(.button-link) {\r\n            color: ${({ theme }) => theme.linkHover};\r\n        }\r\n    }\r\n\r\n    ion-icon {\r\n        color: ${({ theme }) => theme.inputText};\r\n    }\r\n\r\n    .element {\r\n        color: ${({ theme }) => theme.text};\r\n        background-color: ${({ theme }) => theme.elementBG};\r\n    }\r\n\r\n    .theme-switch {\r\n        color: ${({ theme }) => theme.text};\r\n    }\r\n\r\n    .select {\r\n        option {\r\n            color: ${({ theme }) => theme.text};\r\n        }\r\n    }\r\n\r\n    .text-field {\r\n        color: ${({ theme }) => theme.text};\r\n        &::placeholder {\r\n            color: ${({ theme }) => theme.inputText};\r\n        }\r\n    }\r\n\r\n    .button-link {\r\n        &:hover {\r\n            background-color: ${({ theme }) => theme.buttonHover};\r\n        }\r\n    }    \r\n`;\r\n","import React, { useState } from \"react\";\r\nimport \"../css/ThemeSwitch.css\";\r\n\r\nfunction ThemeSwitch({ onThemeSwitch }) {\r\n    const [darkMode, setDarkMode] = useState(false);\r\n\r\n    function handleThemeSwitch() {\r\n        setDarkMode(!darkMode);\r\n        onThemeSwitch(!darkMode);\r\n    }\r\n\r\n    return (\r\n        <button className=\"theme-switch\" onClick={handleThemeSwitch}>\r\n            <ion-icon\r\n                name={darkMode ? \"moon\" : \"sunny\"}\r\n                aria-hidden=\"true\"\r\n            ></ion-icon>\r\n            {darkMode ? \"Light\" : \"Dark\"} Mode\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ThemeSwitch;\r\n","import React, { useState } from \"react\";\r\nimport \"../css/NameInput.css\";\r\n\r\nfunction NameInput({ defaultVal, onNameInput }) {\r\n    const [input, setInput] = useState(defaultVal);\r\n\r\n    function handleChange(event) {\r\n        setInput(event.target.value);\r\n        onNameInput(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"name-input-wrapper form-element element\">\r\n            <ion-icon name=\"search-outline\" aria-hidden=\"true\"></ion-icon>\r\n            <input\r\n                type=\"text\"\r\n                aria-label=\"Search for a country\"\r\n                placeholder=\"Search for a country...\"\r\n                value={input}\r\n                className=\"text-field name-input-wrapper__text-input\"\r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NameInput;\r\n","import React, { useState } from \"react\";\r\nimport \"../css/RegionSelect.css\";\r\n\r\nfunction RegionSelect({ defaultVal, onRegionSelect }) {\r\n    const [value, setValue] = useState(defaultVal);\r\n\r\n    function handleChange(event) {\r\n        setValue(event.target.value);\r\n        onRegionSelect(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <select\r\n            name=\"region\"\r\n            id=\"region\"\r\n            aria-label=\"Search by region\"\r\n            onChange={handleChange}\r\n            value={value}\r\n            className=\"region-select select form-element element\"\r\n        >\r\n            <option value=\"\">Filter by Region</option>\r\n            <option value=\"Africa\">Africa</option>\r\n            <option value=\"Americas\">America</option>\r\n            <option value=\"Asia\">Asia</option>\r\n            <option value=\"Europe\">Europe</option>\r\n            <option value=\"Oceania\">Oceania</option>\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default RegionSelect;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/Country.css\";\r\n\r\nfunction Country({ obj }) {\r\n    const { flag, name, population, region, capital } = obj;\r\n\r\n    /**\r\n     * Checks if a string has a length greater than zero. If so, return N/A.\r\n     * Used for countries that do not have a capital/region/sub region, etc.\r\n     * @param {String} string   String to check\r\n     * @returns                 Value of string or \"N/A\"\r\n     */\r\n    function stringExists(string) {\r\n        return string.length > 0 ? string : \"N/A\";\r\n    }\r\n\r\n    /**\r\n     * Removes any parentheses in the link.\r\n     * @param {String} link Link\r\n     * @returns             New link without parentheses\r\n     */\r\n    function removeParentheses(link) {\r\n        return link.replace(\"(\", \"\").replace(\")\", \"\");\r\n    }\r\n\r\n    return (\r\n        <li className=\"country element\">\r\n            <div className=\"country__flag-wrapper\">\r\n                <img\r\n                    src={flag}\r\n                    alt={`Flag of ${name}`}\r\n                    className=\"country__flag\"\r\n                />\r\n            </div>\r\n            <div className=\"country__details\">\r\n                <h2>\r\n                    <Link to={`/${removeParentheses(name)}`}>{name}</Link>\r\n                </h2>\r\n                <p>\r\n                    <strong>Population:</strong> {population.toLocaleString()}\r\n                </p>\r\n                <p>\r\n                    <strong>Region:</strong> {stringExists(region)}\r\n                </p>\r\n                <p>\r\n                    <strong>Capital:</strong> {stringExists(capital)}\r\n                </p>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Country;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport \"../css/Borders.css\";\r\n\r\nfunction Borders({ borders }) {\r\n    const [names, setNames] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (borders.length > 0) {\r\n            // Formats string of borders into codes the API will accept\r\n            var codes = \"\";\r\n            for (let i = 0; i < borders.length; i++) {\r\n                if (i === borders.length - 1) {\r\n                    codes += borders[i];\r\n                } else {\r\n                    codes += `${borders[i]};`;\r\n                }\r\n            }\r\n            const url = `https://restcountries.eu/rest/v2/alpha?codes=${codes}`;\r\n\r\n            $.get(url, function (data) {\r\n                var items = [];\r\n                data.forEach((country) => {\r\n                    items.push(country.name);\r\n                });\r\n                setNames(items);\r\n            }).fail(function (xhr, status, error) {\r\n                setError(`Error ${xhr.status}. ${xhr.responseText}`);\r\n            });\r\n        }\r\n    }, [borders]);\r\n\r\n    /**\r\n     * Removes any parentheses in the link.\r\n     * @param {String} link Link\r\n     * @returns             New link without parentheses\r\n     */\r\n    function removeParentheses(link) {\r\n        return link.replace(\"(\", \"\").replace(\")\", \"\");\r\n    }\r\n\r\n    const bordersEl =\r\n        names.length > 0 ? (\r\n            <>\r\n                <p className=\"borders__label\">\r\n                    <strong>Border Countries:</strong>\r\n                </p>\r\n                <ul className=\"borders__ul\">\r\n                    {names.map((name) => (\r\n                        <li key={name}>\r\n                            <Link\r\n                                to={`/${removeParentheses(name)}`}\r\n                                className=\"button-link element\"\r\n                            >\r\n                                {name}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </>\r\n        ) : (\r\n            <p className=\"borders__label\">\r\n                <strong>Border Countries:</strong> N/A\r\n            </p>\r\n        );\r\n\r\n    return (\r\n        <div className=\"borders\">\r\n            {error.length > 0 ? (\r\n                <p>There was a problem requesting border data. {error}</p>\r\n            ) : (\r\n                bordersEl\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Borders;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Borders from \"./Borders\";\r\nimport \"../css/CountryDetails.css\";\r\n\r\nfunction CountryDetails({ obj }) {\r\n    const {\r\n        flag,\r\n        name,\r\n        nativeName,\r\n        population,\r\n        region,\r\n        subregion,\r\n        capital,\r\n        topLevelDomain,\r\n        currencies,\r\n        languages,\r\n        borders,\r\n    } = obj;\r\n\r\n    /**\r\n     * Checks if a string has a length greater than zero. If so, return N/A.\r\n     * Used for countries that do not have a capital/region/sub region, etc.\r\n     * @param {String} string   String to check\r\n     * @returns                 Value of string or \"N/A\"\r\n     */\r\n    function stringExists(string) {\r\n        return string.length > 0 ? string : \"N/A\";\r\n    }\r\n\r\n    /**\r\n     * Returns the array as a string with each element separated by commas.\r\n     * @param {Object} arr  Array to format\r\n     * @returns             Array formatted into a string\r\n     */\r\n    function formatArray(arr) {\r\n        var string = \"\";\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (i === arr.length - 1) {\r\n                string += arr[i].name;\r\n            } else {\r\n                string += `${arr[i].name}, `;\r\n            }\r\n        }\r\n        return string;\r\n    }\r\n\r\n    return (\r\n        <section className=\"country-details-section country-details\">\r\n            <Link to=\"/\" className=\"button-link button-link--icon element\">\r\n                <ion-icon\r\n                    name=\"arrow-back-outline\"\r\n                    aria-hidden=\"true\"\r\n                ></ion-icon>{\" \"}\r\n                Back\r\n            </Link>\r\n\r\n            <img\r\n                src={flag}\r\n                alt={`Flag of ${name}`}\r\n                className=\"country-details__flag\"\r\n            />\r\n\r\n            <h2 className=\"country-details__header\">{name}</h2>\r\n\r\n            <div className=\"country-details__text\">\r\n                <div>\r\n                    <p>\r\n                        <strong>Native Name:</strong> {nativeName}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Population:</strong>{\" \"}\r\n                        {population.toLocaleString()}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Region:</strong> {stringExists(region)}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Sub Region:</strong> {stringExists(subregion)}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Capital:</strong> {stringExists(capital)}\r\n                    </p>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>\r\n                        <strong>Top Level Domain:</strong> {topLevelDomain}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Currencies:</strong> {formatArray(currencies)}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Languages:</strong> {formatArray(languages)}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <Borders borders={borders} />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyles, lightTheme, darkTheme } from \"./Themes\";\r\nimport $ from \"jquery\";\r\nimport ThemeSwitch from \"./ThemeSwitch\";\r\nimport NameInput from \"./NameInput\";\r\nimport RegionSelect from \"./RegionSelect\";\r\nimport Country from \"./Country\";\r\nimport CountryDetails from \"./CountryDetails\";\r\nimport \"../css/App.css\";\r\n\r\nfunction App() {\r\n    const [countries, setCountries] = useState([]);\r\n    const [nameSearch, setNameSearch] = useState(\"\");\r\n    const [regionSearch, setRegionSearch] = useState(\"\");\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(<p>Requesting data...</p>);\r\n\r\n    useEffect(() => {\r\n        if (countries.length === 0) {\r\n            $.get(\"https://restcountries.eu/rest/v2/all\", function (data) {\r\n                setCountries(data);\r\n            })\r\n                .done(function () {\r\n                    setMessage(undefined);\r\n                })\r\n                .fail(function (xhr, status, error) {\r\n                    setError(\r\n                        `Could not retrieve country data. ` +\r\n                            `Error ${xhr.status}. ${xhr.responseText}`\r\n                    );\r\n                });\r\n        }\r\n    }, [countries]);\r\n\r\n    function toggleTheme(onDarkMode) {\r\n        setDarkMode(onDarkMode);\r\n    }\r\n\r\n    /**\r\n     * Set the state nameSearch to match NameInput's value\r\n     * @param {String} input    Country name input\r\n     */\r\n    function handleNameSearch(input) {\r\n        setNameSearch(input);\r\n    }\r\n\r\n    /**\r\n     * Set the state regionSearch to match RegionSelect's value\r\n     * @param {String} input    Region select value\r\n     */\r\n    function handleRegionSelect(input) {\r\n        setRegionSearch(input);\r\n    }\r\n\r\n    /**\r\n     * Check if the country's name matches the name search\r\n     * @param {Object} country  Country JSON object\r\n     */\r\n    function nameMatch(country) {\r\n        const { name } = country;\r\n        return name.toLowerCase().includes(nameSearch.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Check if the country's region matches the selected region\r\n     * @param {Object} country Country JSON object\r\n     */\r\n    function regionMatch(country) {\r\n        const { region } = country;\r\n        if (regionSearch !== \"\") {\r\n            return region === regionSearch;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Filters countries based on name and region\r\n    const filteredCountries = countries.filter(\r\n        (country) => nameMatch(country) && regionMatch(country)\r\n    );\r\n\r\n    const homeCountryContent =\r\n        error.length > 0 ? (\r\n            <p>{error}</p>\r\n        ) : (\r\n            <ul className=\"country-list\">\r\n                {filteredCountries.map((country) => (\r\n                    <Country key={country.name} obj={country} />\r\n                ))}\r\n            </ul>\r\n        );\r\n\r\n    return (\r\n        <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\r\n            <GlobalStyles />\r\n            <header className=\"element\">\r\n                <h1>Where in the world?</h1>\r\n                <ThemeSwitch onThemeSwitch={toggleTheme} />\r\n            </header>\r\n\r\n            <main>\r\n                <Router>\r\n                    <Switch>\r\n                        {countries.map((country) => (\r\n                            <Route key={country.name} path={`/${country.name}`}>\r\n                                <CountryDetails obj={country} />\r\n                            </Route>\r\n                        ))}\r\n\r\n                        <Route path=\"/\">\r\n                            <section className=\"countries-section\">\r\n                                <div className=\"filter-form\">\r\n                                    <NameInput\r\n                                        onNameInput={handleNameSearch}\r\n                                        defaultVal={nameSearch}\r\n                                    />\r\n\r\n                                    <RegionSelect\r\n                                        onRegionSelect={handleRegionSelect}\r\n                                        defaultVal={regionSearch}\r\n                                    />\r\n                                </div>\r\n\r\n                                {message}\r\n\r\n                                {homeCountryContent}\r\n                            </section>\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n            </main>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}